package main
// WARNING: DO NOT edit this file, it would be overwritten by domain/0_generator_test.go


import (
	"context"
	"coba/conf"
	"coba/domain"

	"os"
)

func cliArgsRunner(args []string) {
	tracerCtx, span := conf.T.Start(context.Background(), args[0])
	defer span.End()

	var (
		vdomain = domain.NewDomain()
	)

	patterns := map[string]map[string]int{
		domain.DeleteFruit_Url:          {},
		domain.DeleteFruitProducts_Url:  {},
		domain.FruitProducts_Url:        {},
		domain.Health_Url:               {},
		domain.InsertFruit_Url:          {},
		domain.InsertFruitProducts_Url:  {},
		domain.RestoreFruit_Url:         {},
		domain.RestoreFruitProducts_Url: {},
		domain.StoreCartItemsAdd_Url:    {},
		domain.StoreInvoice_Url:         {},
		domain.StoreProducts_Url:        {},
		domain.UpdateFruit_Url:          {},
		domain.UpdateFruitProducts_Url:  {},
		domain.UserChangeEmail_Url:      {},
		domain.UserChangePassword_Url:   {},
		domain.UserConfirmEmail_Url:     {},
		domain.UserForgotPassword_Url:   {},
		domain.UserList_Url:             {},
		domain.UserLogin_Url:            {},
		domain.UserLogout_Url:           {},
		domain.UserProfile_Url:          {},
		domain.UserRegister_Url:         {},
		domain.UserResetPassword_Url:    {},
		domain.XXX_Url:                  {},
	}
	switch pattern := cliUrlPattern(args[0], patterns); pattern {

	case domain.DeleteFruit_Url:
		in := domain.DeleteFruit_In{}
		in.FromCli(os.Stdin, tracerCtx)
		out := vdomain.DeleteFruit(&in)
		out.ToCli(os.Stdout)
		in.ToCli(os.Stdout, &out)

	case domain.DeleteFruitProducts_Url:
		in := domain.DeleteFruitProducts_In{}
		in.FromCli(os.Stdin, tracerCtx)
		out := vdomain.DeleteFruitProducts(&in)
		out.ToCli(os.Stdout)
		in.ToCli(os.Stdout, &out)

	case domain.FruitProducts_Url:
		in := domain.FruitProducts_In{}
		in.FromCli(os.Stdin, tracerCtx)
		out := vdomain.FruitProducts(&in)
		out.ToCli(os.Stdout)
		in.ToCli(os.Stdout, &out)

	case domain.Health_Url:
		in := domain.Health_In{}
		in.FromCli(os.Stdin, tracerCtx)
		out := vdomain.Health(&in)
		out.ToCli(os.Stdout)
		in.ToCli(os.Stdout, &out)

	case domain.InsertFruit_Url:
		in := domain.InsertFruit_In{}
		in.FromCli(os.Stdin, tracerCtx)
		out := vdomain.InsertFruit(&in)
		out.ToCli(os.Stdout)
		in.ToCli(os.Stdout, &out)

	case domain.InsertFruitProducts_Url:
		in := domain.InsertFruitProducts_In{}
		in.FromCli(os.Stdin, tracerCtx)
		out := vdomain.InsertFruitProducts(&in)
		out.ToCli(os.Stdout)
		in.ToCli(os.Stdout, &out)

	case domain.RestoreFruit_Url:
		in := domain.RestoreFruit_In{}
		in.FromCli(os.Stdin, tracerCtx)
		out := vdomain.RestoreFruit(&in)
		out.ToCli(os.Stdout)
		in.ToCli(os.Stdout, &out)

	case domain.RestoreFruitProducts_Url:
		in := domain.RestoreFruitProducts_In{}
		in.FromCli(os.Stdin, tracerCtx)
		out := vdomain.RestoreFruitProducts(&in)
		out.ToCli(os.Stdout)
		in.ToCli(os.Stdout, &out)

	case domain.StoreCartItemsAdd_Url:
		in := domain.StoreCartItemsAdd_In{}
		in.FromCli(os.Stdin, tracerCtx)
		out := vdomain.StoreCartItemsAdd(&in)
		out.ToCli(os.Stdout)
		in.ToCli(os.Stdout, &out)

	case domain.StoreInvoice_Url:
		in := domain.StoreInvoice_In{}
		in.FromCli(os.Stdin, tracerCtx)
		out := vdomain.StoreInvoice(&in)
		out.ToCli(os.Stdout)
		in.ToCli(os.Stdout, &out)

	case domain.StoreProducts_Url:
		in := domain.StoreProducts_In{}
		in.FromCli(os.Stdin, tracerCtx)
		out := vdomain.StoreProducts(&in)
		out.ToCli(os.Stdout)
		in.ToCli(os.Stdout, &out)

	case domain.UpdateFruit_Url:
		in := domain.UpdateFruit_In{}
		in.FromCli(os.Stdin, tracerCtx)
		out := vdomain.UpdateFruit(&in)
		out.ToCli(os.Stdout)
		in.ToCli(os.Stdout, &out)

	case domain.UpdateFruitProducts_Url:
		in := domain.UpdateFruitProducts_In{}
		in.FromCli(os.Stdin, tracerCtx)
		out := vdomain.UpdateFruitProducts(&in)
		out.ToCli(os.Stdout)
		in.ToCli(os.Stdout, &out)

	case domain.UserChangeEmail_Url:
		in := domain.UserChangeEmail_In{}
		in.FromCli(os.Stdin, tracerCtx)
		out := vdomain.UserChangeEmail(&in)
		out.ToCli(os.Stdout)
		in.ToCli(os.Stdout, &out)

	case domain.UserChangePassword_Url:
		in := domain.UserChangePassword_In{}
		in.FromCli(os.Stdin, tracerCtx)
		out := vdomain.UserChangePassword(&in)
		out.ToCli(os.Stdout)
		in.ToCli(os.Stdout, &out)

	case domain.UserConfirmEmail_Url:
		in := domain.UserConfirmEmail_In{}
		in.FromCli(os.Stdin, tracerCtx)
		out := vdomain.UserConfirmEmail(&in)
		out.ToCli(os.Stdout)
		in.ToCli(os.Stdout, &out)

	case domain.UserForgotPassword_Url:
		in := domain.UserForgotPassword_In{}
		in.FromCli(os.Stdin, tracerCtx)
		out := vdomain.UserForgotPassword(&in)
		out.ToCli(os.Stdout)
		in.ToCli(os.Stdout, &out)

	case domain.UserList_Url:
		in := domain.UserList_In{}
		in.FromCli(os.Stdin, tracerCtx)
		out := vdomain.UserList(&in)
		out.ToCli(os.Stdout)
		in.ToCli(os.Stdout, &out)

	case domain.UserLogin_Url:
		in := domain.UserLogin_In{}
		in.FromCli(os.Stdin, tracerCtx)
		out := vdomain.UserLogin(&in)
		out.ToCli(os.Stdout)
		in.ToCli(os.Stdout, &out)

	case domain.UserLogout_Url:
		in := domain.UserLogout_In{}
		in.FromCli(os.Stdin, tracerCtx)
		out := vdomain.UserLogout(&in)
		out.ToCli(os.Stdout)
		in.ToCli(os.Stdout, &out)

	case domain.UserProfile_Url:
		in := domain.UserProfile_In{}
		in.FromCli(os.Stdin, tracerCtx)
		out := vdomain.UserProfile(&in)
		out.ToCli(os.Stdout)
		in.ToCli(os.Stdout, &out)

	case domain.UserRegister_Url:
		in := domain.UserRegister_In{}
		in.FromCli(os.Stdin, tracerCtx)
		out := vdomain.UserRegister(&in)
		out.ToCli(os.Stdout)
		in.ToCli(os.Stdout, &out)

	case domain.UserResetPassword_Url:
		in := domain.UserResetPassword_In{}
		in.FromCli(os.Stdin, tracerCtx)
		out := vdomain.UserResetPassword(&in)
		out.ToCli(os.Stdout)
		in.ToCli(os.Stdout, &out)

	case domain.XXX_Url:
		in := domain.XXX_In{}
		in.FromCli(os.Stdin, tracerCtx)
		out := vdomain.XXX(&in)
		out.ToCli(os.Stdout)
		in.ToCli(os.Stdout, &out)

	}
}

// WARNING: DO NOT edit this file, it would be overwritten by domain/0_generator_test.go
